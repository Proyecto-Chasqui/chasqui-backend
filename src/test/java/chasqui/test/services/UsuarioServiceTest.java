package chasqui.test.services;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import chasqui.dao.UsuarioDAO;
import chasqui.exceptions.DireccionesInexistentes;
import chasqui.exceptions.RequestIncorrectoException;
import chasqui.exceptions.UsuarioExistenteException;
import chasqui.exceptions.UsuarioInexistenteException;
import chasqui.model.Cliente;
import chasqui.model.Direccion;
import chasqui.service.rest.request.DireccionEditRequest;
import chasqui.service.rest.request.DireccionRequest;
import chasqui.service.rest.request.EditarPerfilRequest;
import chasqui.services.interfaces.PedidoService;
import chasqui.services.interfaces.UsuarioService;



@ContextConfiguration(locations = {
"file:src/test/java/dataSource-Test.xml",
"file:src/main/resources/beans/service-beans.xml"})
@RunWith(SpringJUnit4ClassRunner.class)
public class UsuarioServiceTest extends GenericSetUp{

	
	private static final int ID_DOMICILIO_CLIENTE = 15;
	@Autowired UsuarioService usuarioService;
	@Autowired PedidoService pedidoService;
	@Autowired UsuarioDAO usuarioDAO;
	EditarPerfilRequest edicionUsuario;
	DireccionRequest direccionRequest;
	DireccionEditRequest editRequest;
	String absolutePath;
	String extension;
	String avatarBase64;
	//Cliente cliente;

	public static String EMAIL_CLIENTE = "jperez@gmail.com";// "jfflores90@gmail.com";
	
	
	
	@Before
	public void setUp() throws Exception{
		super.setUp();		
//		cliente = new Cliente();
//		cliente.setToken("federico");
//		cliente.setPassword(encrypter.encrypt("federico"));
//		cliente.setEmail(EMAIL_CLIENTE);
//		cliente.setNombre("JORGE");
//		cliente.setApellido("Flores");
//		cliente.setTelefonoFijo("12314124");
//		cliente.setTelefonoMovil("1234214124");
//		cliente.setNickName("MatLock");
		
		
		
		
		//clienteJuanPerez.setDireccionesAlternativas(dds);
		
		edicionUsuario = new EditarPerfilRequest();
		edicionUsuario.setApellido("nuevoApellido");
		edicionUsuario.setNombre("nuevoNombre");
		edicionUsuario.setTelefonoFijo("12345678");
		edicionUsuario.setAvatar("");
		edicionUsuario.setExtension(".jpg");
		
		
		direccionRequest = new DireccionRequest();
		direccionRequest.setAlias("Trabajo");
		direccionRequest.setAltura(123456);
		direccionRequest.setCalle("trabajo");
		direccionRequest.setCodigoPostal("312dsaw");
		direccionRequest.setLocalidad("Avellaneda");
		direccionRequest.setPredeterminada(false);
		direccionRequest.setLongitud("15");
		direccionRequest.setLatitud("15");
		
		
		editRequest = new DireccionEditRequest();
		editRequest.setAlias("nuevoAlias");
		editRequest.setCalle("nuevaCalle");
		editRequest.setAltura(1234);
		editRequest.setCodigoPostal("1234");
		editRequest.setPredeterminada(true);
		editRequest.setLocalidad("Avellaneda");
		
		editRequest.setIdDireccion(direccionCasa.getId());
		
		extension = ".jpeg";
		avatarBase64 = "/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMtaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MSA2NC4xNDA5NDksIDIwMTAvMTIvMDctMTA6NTc6MDEgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzUuMSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NUQ0QTA0NUY2QkRBMTFFMUFGMTE5OUFERDA4MkE2MTAiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NUQ0QTA0NjA2QkRBMTFFMUFGMTE5OUFERDA4MkE2MTAiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo1RDRBMDQ1RDZCREExMUUxQUYxMTk5QUREMDgyQTYxMCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo1RDRBMDQ1RTZCREExMUUxQUYxMTk5QUREMDgyQTYxMCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEAAYEBAQFBAYFBQYJBgUGCQsI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";
		
	}
	
	
	@After
	public void tearDown(){
		//usuarioService.deleteObject(cliente);
		super.tearDown();
	}
	
	
	@Test
	public void testObtenerUsuarioPorEmail() throws UsuarioInexistenteException{
		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		assertEquals(c2.getEmail(),clienteJuanPerez.getEmail());
	}
	
	@Test(expected=UsuarioInexistenteException.class)
	public void testObtenerUsuarioInvalidoPorEmail() throws UsuarioInexistenteException{
		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail("unnmailquenoexiste@mail.com");
	}
	
	
	@Test
	public void testEditarPerfilUsuario() throws Exception{
		usuarioService.modificarUsuario(edicionUsuario,EMAIL_CLIENTE);
		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		assertEquals(c2.getUsername(),CLIENTE_NICK_NAME);
		assertEquals(c2.getNombre(),"nuevoNombre");
		assertEquals(c2.getApellido(),"nuevoApellido");
	}
	
	@Test(expected=UsuarioExistenteException.class)
	public void testEditarPerfilUsuarioInexistente() throws Exception{
		usuarioService.modificarUsuario(edicionUsuario,"sarasa@gmail.com");
	}
	
	
	@Test
	public void testObtenerDireccionesUsuario() throws Exception{
		usuarioService.modificarUsuario(edicionUsuario,EMAIL_CLIENTE);

		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.inicializarDirecciones(c2);
		
		List<Direccion> ds = c2.getDireccionesAlternativas();
		assertTrue(null != ds);
		assertEquals(ds.get(0).getCalle(),DIRECCION_CALLE);
	}
	
	@Test(expected=UsuarioInexistenteException.class)
	public void testObtenerDireccionesDeUsuarioInexistente() throws Exception{

		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail("sarasa@gmail.com");
	}
	
	
	@Test
	public void testAgregarNuevaDireccionUsuario() throws UsuarioInexistenteException, RequestIncorrectoException{
		
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);

		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.inicializarDirecciones(c2);
		
		assertTrue(c2.getDireccionesAlternativas() != null);
		assertEquals(c2.getDireccionesAlternativas().size(),2);
	}
	
	@Test(expected=UsuarioInexistenteException.class)
	public void testAgregarNuevaDireccionUsuarioInexistente() throws UsuarioInexistenteException, RequestIncorrectoException{
		usuarioService.agregarDireccionAUsuarioCon("sarasa@gmail.com", direccionRequest);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioCalleNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setCalle(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioAliasNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setAlias(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	@Test
	public void testAgregarNuevaDireccionUsuarioCodigoPostalNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setCodigoPostal(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
		Cliente c = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.inicializarDirecciones(c);
		assertEquals(c.getDireccionesAlternativas().size(), 2);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioDirPredeterminadaNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setPredeterminada(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioLocalidadNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setLocalidad(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioAlturaNull() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setAltura(null);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	@Test(expected=RequestIncorrectoException.class)
	public void testAgregarNuevaDireccionUsuarioAlturaNegativa() throws UsuarioInexistenteException, RequestIncorrectoException{
		direccionRequest.setAltura(-10);
		usuarioService.agregarDireccionAUsuarioCon(EMAIL_CLIENTE, direccionRequest);
	}
	
	
	@Test
	public void testEditarDireccionUsuario() throws UsuarioExistenteException, DireccionesInexistentes, UsuarioInexistenteException, RequestIncorrectoException{
		usuarioService.editarDireccionDe(EMAIL_CLIENTE,editRequest,editRequest.getIdDireccion());

		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.inicializarDirecciones(c2);
		
		assertTrue(c2.getDireccionesAlternativas() != null);
		assertEquals(c2.getDireccionesAlternativas().size(),1);
		assertEquals(c2.getDireccionesAlternativas().get(0).getCalle(),editRequest.getCalle());
	}
	
	@Test
	public void testEditarDireccionUsuarioDeberiaActualizarLaGeoUbicacion() throws UsuarioExistenteException, DireccionesInexistentes, UsuarioInexistenteException, RequestIncorrectoException{
		editRequest.setLatitud("30");
		editRequest.setLongitud("30");
		usuarioService.editarDireccionDe(EMAIL_CLIENTE,editRequest,editRequest.getIdDireccion());
		Cliente c2 = (Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.inicializarDirecciones(c2);
		assertTrue(c2.getDireccionesAlternativas().get(0).getGeoUbicacion() != null);
		assertTrue(c2.getDireccionesAlternativas().get(0).getGeoUbicacion().getX() == 30 && c2.getDireccionesAlternativas().get(0).getGeoUbicacion().getY() == 30);
	}
	
	@Test(expected=UsuarioInexistenteException.class)
	public void testEditarDireccionUsuarioInexistente() throws UsuarioInexistenteException, DireccionesInexistentes, RequestIncorrectoException{
		usuarioService.editarDireccionDe("sarasa@gmail.com",editRequest,editRequest.getIdDireccion());
	}
	
	@Test(expected=UsuarioInexistenteException.class)
	public void testEditarDireccionUsuarioDireccionInexistente() throws UsuarioExistenteException, DireccionesInexistentes, UsuarioInexistenteException, RequestIncorrectoException{
		usuarioService.editarDireccionDe("sarasa@gmail.com",editRequest,ID_DOMICILIO_CLIENTE);
	}
	
	@Test(expected=DireccionesInexistentes.class)
	public void testEditarDireccionUsuarioDireccionNull() throws UsuarioExistenteException, DireccionesInexistentes, UsuarioInexistenteException, RequestIncorrectoException{
		usuarioService.editarDireccionDe(EMAIL_CLIENTE,editRequest,null);
	}
	
	
	@Test
	public void testEditarAvatarUsuario() throws IOException, Exception{
		Cliente cliente =(Cliente) usuarioService.obtenerUsuarioPorEmail(EMAIL_CLIENTE);
		usuarioService.editarAvatarDe(cliente, this.avatarBase64, this.extension);
		
		assertTrue(cliente.getImagenPerfil().contains(cliente.getId().toString() + "/"+ cliente.getId() + "_avatar.jpeg"));
	}
	
	@Test
	public void testEditarAvatarUsuarioActualizaLosMiembroGCCDeEseUsuario(){
		
	}
//	YA NO HACEMOS ESTE CONTROL @Test(expected=PedidoVigenteException.class)
//	public void testCrearPedidoIndividualUsuarioSinDireccionPredeterminada() throws ConfiguracionDeVendedorException, PedidoVigenteException, UsuarioInexistenteException{
//		clienteJuanPerez.getDireccionesAlternativas().clear();
//		usuarioService.guardarUsuario(clienteJuanPerez);
//		usuarioService.crearPedidoIndividualPara(EMAIL_CLIENTE, vendedor.getId());
//	}
	
	
	}
 
